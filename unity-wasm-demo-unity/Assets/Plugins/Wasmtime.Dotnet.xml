<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wasmtime.Dotnet</name>
    </assembly>
    <members>
        <member name="T:Wasmtime.Caller">
            <summary>
            Represents caller information for a function.
            </summary>
        </member>
        <member name="M:Wasmtime.Caller.TryGetMemorySpan``1(System.String,System.Int64,System.Int32,System.Span{``0}@)">
             <summary>
             Gets a Span from an exported memory of the caller by the given name.
             </summary>
             <param name="name">The name of the exported memory.</param>
             <param name="address">The zero-based address of the start of the span.</param>
             <param name="length">The length of the span.</param>
             <param name="result">The Span of memory (if the function returns true)</param>
             <returns>Returns true if the exported memory is found or false if a memory of the requested name is not exported.</returns>
             <remarks>
             <para>
             The span may become invalid if the memory grows.
            
             This may happen if the memory is explicitly requested to grow or
             grows as a result of WebAssembly execution.
             </para>
             <para>
             Therefore, the returned span should not be used after calling the grow method or
             after calling into WebAssembly code.
             </para>
             <para>
             Note that WebAssembly always uses little endian as byte order. On platforms 
             that use big endian, you will need to convert numeric values accordingly.
             </para>
             </remarks>
        </member>
        <member name="M:Wasmtime.Caller.GetMemory(System.String)">
            <summary>
            Gets an exported memory of the caller by the given name.
            </summary>
            <param name="name">The name of the exported memory.</param>
            <returns>Returns the exported memory if found or null if a memory of the requested name is not exported.</returns>
        </member>
        <member name="M:Wasmtime.Caller.GetFunction(System.String)">
            <summary>
            Gets an exported function of the caller by the given name.
            </summary>
            <param name="name">The name of the exported function.</param>
            <returns>Returns the exported function if found or null if a function of the requested name is not exported.</returns>
        </member>
        <member name="P:Wasmtime.Caller.Store">
            <summary>
            Gets the <see cref="P:Wasmtime.Caller.Store"/> associated with this caller.
            </summary>
        </member>
        <member name="P:Wasmtime.Caller.Fuel">
            <summary>
            Gets or sets the fuel available for WebAssembly code to consume while executing.
            </summary>
            <remarks>
            <para>
            For this property to work, fuel consumption must be enabled via <see cref="M:Wasmtime.Config.WithFuelConsumption(System.Boolean)"/>.
            </para>
            <para>
            WebAssembly execution will automatically consume fuel but if so desired the embedder can also consume fuel manually
            to account for relative costs of host functions, for example.
            </para>
            </remarks>
            <value>The fuel available for WebAssembly code to consume while executing.</value>
        </member>
        <member name="M:Wasmtime.Caller.GetData">
            <summary>
            Gets the user-defined data from the Store. 
            </summary>
            <returns>An object represeting the user defined data from this Store</returns>
        </member>
        <member name="M:Wasmtime.Caller.SetData(System.Object)">
            <summary>
            Replaces the user-defined data in the Store.
            </summary>
        </member>
        <member name="T:Wasmtime.CompilerStrategy">
            <summary>
            Represents the Wasmtime compiler strategy.
            </summary>
        </member>
        <member name="F:Wasmtime.CompilerStrategy.Auto">
            <summary>
            Automatically pick the compiler strategy.
            </summary>
        </member>
        <member name="F:Wasmtime.CompilerStrategy.Cranelift">
            <summary>
            Use the Cranelift compiler.
            </summary>
        </member>
        <member name="T:Wasmtime.OptimizationLevel">
            <summary>
            Represents the Wasmtime optimization level.
            </summary>
        </member>
        <member name="F:Wasmtime.OptimizationLevel.None">
            <summary>
            Disable optimizations.
            </summary>
        </member>
        <member name="F:Wasmtime.OptimizationLevel.Speed">
            <summary>
            Optimize for speed.
            </summary>
        </member>
        <member name="F:Wasmtime.OptimizationLevel.SpeedAndSize">
            <summary>
            Optimize for speed and size.
            </summary>
        </member>
        <member name="T:Wasmtime.ProfilingStrategy">
            <summary>
            Represents the Wasmtime code profiling strategy.
            </summary>
        </member>
        <member name="F:Wasmtime.ProfilingStrategy.None">
            <summary>
            Disable code profiling.
            </summary>
        </member>
        <member name="F:Wasmtime.ProfilingStrategy.JitDump">
            <summary>
            Linux "jitdump" profiling.
            </summary>
        </member>
        <member name="F:Wasmtime.ProfilingStrategy.VTune">
            <summary>
            VTune code profiling.
            </summary>
        </member>
        <member name="F:Wasmtime.ProfilingStrategy.PerfMap">
            <summary>
            Linux "perfmap" profiling.
            </summary>
        </member>
        <member name="T:Wasmtime.Config">
            <summary>
            Represents a configuration used to create <see cref="T:Wasmtime.Engine"/> instances.
            </summary>
        </member>
        <member name="M:Wasmtime.Config.#ctor">
            <summary>
            Creates a new configuration.
            </summary>
        </member>
        <member name="M:Wasmtime.Config.WithDebugInfo(System.Boolean)">
            <summary>
            Sets whether or not to enable debug information.
            </summary>
            <param name="enable">True to enable debug information or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithEpochInterruption(System.Boolean)">
            <summary>
            Sets whether or not to enable epoch-based interruption of WebAssembly code.
            </summary>
            <param name="enable">True to enable epoch-based interruption or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithFuelConsumption(System.Boolean)">
            <summary>
            Sets whether or not to enable fuel consumption for WebAssembly code.
            </summary>
            <param name="enable">True to enable fuel consumption or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithMaximumStackSize(System.Int32)">
            <summary>
            Sets the maximum WebAssembly stack size.
            </summary>
            <param name="size">The maximum WebAssembly stack size, in bytes.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithWasmThreads(System.Boolean)">
            <summary>
            Sets whether or not enable WebAssembly threads support.
            </summary>
            <param name="enable">True to enable WebAssembly threads support or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithReferenceTypes(System.Boolean)">
            <summary>
            Sets whether or not enable WebAssembly reference types support.
            </summary>
            <param name="enable">True to enable WebAssembly reference types support or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithSIMD(System.Boolean)">
            <summary>
            Sets whether or not enable WebAssembly SIMD support.
            </summary>
            <param name="enable">True to enable WebAssembly SIMD support or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithRelaxedSIMD(System.Boolean,System.Boolean)">
            <summary>
            Sets whether or not to enable WebAssembly Relaxed SIMD support. New SIMD instructions that may be non-deterministic across different hosts unless deterministic mode is enabled.
            </summary>
            <param name="enable">True to enable WebAssembly Relaxed SIMD support or false to disable.</param>
            <param name="deterministic">True to enable deterministic mode for WebAssembly Relaxed SIMD or false to allow non-deterministic execution.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithBulkMemory(System.Boolean)">
            <summary>
            Sets whether or not enable WebAssembly bulk memory support.
            </summary>
            <param name="enable">True to enable WebAssembly bulk memory support or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithMultiValue(System.Boolean)">
            <summary>
            Sets whether or not enable WebAssembly multi-value support.
            </summary>
            <param name="enable">True to enable WebAssembly multi-value support or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithMultiMemory(System.Boolean)">
            <summary>
            Sets whether or not enable WebAssembly multi-memory support.
            </summary>
            <param name="enable">True to enable WebAssembly multi-memory support or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithMemory64(System.Boolean)">
            <summary>
            Sets whether or not enable WebAssembly memory64 support.
            </summary>
            <param name="enable">True to enable WebAssembly memory64 support or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithCompilerStrategy(Wasmtime.CompilerStrategy)">
            <summary>
            Sets the compiler strategy to use.
            </summary>
            <param name="strategy">The compiler strategy to use.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithCraneliftDebugVerifier(System.Boolean)">
            <summary>
            Sets whether or not enable the Cranelift debug verifier.
            </summary>
            <param name="enable">True to enable the Cranelift debug verifier or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithCraneliftNaNCanonicalization(System.Boolean)">
            <summary>
            Configures whether Cranelift should perform a NaN-canonicalization pass.
            
            When Cranelift is used as a code generation backend this will configure
            it to replace NaNs with a single canonical value.This is useful for users
            requiring entirely deterministic WebAssembly computation.
            
            This is not required by the WebAssembly spec, so it is not enabled by default.
            
            The default value for this is `false`
            </summary>
            <param name="enable">True to enable the Cranelift nan canonicalization or false to disable.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithOptimizationLevel(Wasmtime.OptimizationLevel)">
            <summary>
            Sets the optimization level to use.
            </summary>
            <param name="level">The optimization level to use.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithProfilingStrategy(Wasmtime.ProfilingStrategy)">
            <summary>
            Sets the profiling strategy to use.
            </summary>
            <param name="strategy">The profiling strategy to use.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithStaticMemoryMaximumSize(System.UInt64)">
            <summary>
            Sets the maximum size of static WebAssembly linear memories.
            </summary>
            <param name="size">The maximum size of static WebAssembly linear memories, in bytes.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithStaticMemoryGuardSize(System.UInt64)">
            <summary>
            Sets the maximum size of the guard region for static WebAssembly linear memories.
            </summary>
            <param name="size">The maximum guard region size for static WebAssembly linear memories, in bytes.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithDynamicMemoryGuardSize(System.UInt64)">
            <summary>
            Sets the maximum size of the guard region for dynamic WebAssembly linear memories.
            </summary>
            <param name="size">The maximum guard region size for dynamic WebAssembly linear memories, in bytes.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.WithCacheConfig(System.String)">
            <summary>
            Sets the path to the Wasmtime cache configuration to use.
            </summary>
            <remarks>
            If the path is null, the default Wasmtime cache configuration will be used.
            </remarks>
            <param name="path">The path to the cache configuration file to use or null to load the default configuration.</param>
            <returns>Returns the current config.</returns>
        </member>
        <member name="M:Wasmtime.Config.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Wasmtime.CallerAction">
            <summary>
            Action accepting a caller
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`1">
            <summary>
            Action accepting a caller and 1 parameter
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`2">
            <summary>
            Action accepting a caller and 2 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`3">
            <summary>
            Action accepting a caller and 3 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`4">
            <summary>
            Action accepting a caller and 4 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`5">
            <summary>
            Action accepting a caller and 5 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`6">
            <summary>
            Action accepting a caller and 6 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`7">
            <summary>
            Action accepting a caller and 7 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`8">
            <summary>
            Action accepting a caller and 8 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`9">
            <summary>
            Action accepting a caller and 9 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`10">
            <summary>
            Action accepting a caller and 10 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`11">
            <summary>
            Action accepting a caller and 11 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerAction`12">
            <summary>
            Action accepting a caller and 12 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`1">
            <summary>
            Func accepting a caller
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`2">
            <summary>
            Func accepting a caller and 1 parameter
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`3">
            <summary>
            Func accepting a caller and 2 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`4">
            <summary>
            Func accepting a caller and 3 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`5">
            <summary>
            Func accepting a caller and 4 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`6">
            <summary>
            Func accepting a caller and 5 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`7">
            <summary>
            Func accepting a caller and 6 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`8">
            <summary>
            Func accepting a caller and 7 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`9">
            <summary>
            Func accepting a caller and 8 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`10">
            <summary>
            Func accepting a caller and 9 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`11">
            <summary>
            Func accepting a caller and 10 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`12">
            <summary>
            Func accepting a caller and 11 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.CallerFunc`13">
            <summary>
            Func accepting a caller and 12 parameters
            </summary>
        </member>
        <member name="T:Wasmtime.Engine">
            <summary>
            Represents the Wasmtime engine.
            </summary>
        </member>
        <member name="M:Wasmtime.Engine.#ctor">
            <summary>
            Constructs a new default engine.
            </summary>
        </member>
        <member name="M:Wasmtime.Engine.#ctor(Wasmtime.Config)">
            <summary>
            Constructs a new engine using the given configuration.
            </summary>
            <param name="config">The configuration to use for the engine.</param>
            <remarks>This method will dispose the given configuration.</remarks>
        </member>
        <member name="M:Wasmtime.Engine.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Wasmtime.Engine.IncrementEpoch">
            <summary>
            Increments the epoch for epoch-based interruption
            </summary>
        </member>
        <member name="T:Wasmtime.Export">
            <summary>
            Represents an export of a WebAssembly module or instance.
            </summary>
        </member>
        <member name="P:Wasmtime.Export.Name">
            <summary>
            The name of the export.
            </summary>
        </member>
        <member name="M:Wasmtime.Export.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Wasmtime.FunctionExport">
            <summary>
            Represents a function exported from a WebAssembly module or instance.
            </summary>
        </member>
        <member name="P:Wasmtime.FunctionExport.Parameters">
            <summary>
            The parameter of the exported WebAssembly function.
            </summary>
        </member>
        <member name="P:Wasmtime.FunctionExport.Results">
            <summary>
            The results of the exported WebAssembly function.
            </summary>
        </member>
        <member name="T:Wasmtime.GlobalExport">
            <summary>
            Represents a global variable exported from a WebAssembly module or instance.
            </summary>
        </member>
        <member name="P:Wasmtime.GlobalExport.Kind">
            <summary>
            The kind of value for the global variable.
            </summary>
        </member>
        <member name="P:Wasmtime.GlobalExport.Mutability">
            <summary>
            Gets the mutability of the global.
            </summary>
        </member>
        <member name="T:Wasmtime.MemoryExport">
            <summary>
            Represents a memory exported from a WebAssembly module or instance.
            </summary>
        </member>
        <member name="P:Wasmtime.MemoryExport.Minimum">
            <summary>
            Gets the minimum memory size (in WebAssembly page units).
            </summary>
            <value>The minimum memory size (in WebAssembly page units).</value>
        </member>
        <member name="P:Wasmtime.MemoryExport.Maximum">
            <summary>
            Gets the maximum memory size (in WebAssembly page units).
            </summary>
            <value>The maximum memory size (in WebAssembly page units), or <c>null</c> if no maximum is specified.</value>
        </member>
        <member name="P:Wasmtime.MemoryExport.Is64Bit">
            <summary>
            Gets a value that indicates whether this type of memory represents a 64-bit memory.
            </summary>
            <value><c>true</c> if this type of memory represents a 64-bit memory, <c>false</c> if it represents a 32-bit memory.</value>
        </member>
        <member name="T:Wasmtime.TableExport">
            <summary>
            Represents a table exported from a WebAssembly module or instance.
            </summary>
        </member>
        <member name="P:Wasmtime.TableExport.Kind">
            <summary>
            The value kind of the table.
            </summary>
        </member>
        <member name="P:Wasmtime.TableExport.Minimum">
            <summary>
            The minimum number of elements in the table.
            </summary>
        </member>
        <member name="P:Wasmtime.TableExport.Maximum">
            <summary>
            The maximum number of elements in the table.
            </summary>
        </member>
        <member name="T:Wasmtime.Function">
            <summary>
            Represents a Wasmtime function.
            </summary>
        </member>
        <member name="T:Wasmtime.Function.UntypedCallbackDelegate">
            <summary>
            Encapsulates an untyped callback that receives arguments and can set results via a span of <see cref="T:Wasmtime.ValueBox"/>.
            </summary>
            <param name="caller">The caller.</param>
            <param name="arguments">The function arguments.</param>
            <param name="results">The function results. These must be set (using the correct type) before returning, except when the method throws (in which case they are ignored).</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback(Wasmtime.Store,Wasmtime.Function.UntypedCallbackDelegate,System.Collections.Generic.IReadOnlyList{Wasmtime.ValueKind},System.Collections.Generic.IReadOnlyList{Wasmtime.ValueKind})">
            <summary>
            Creates an function given an untyped callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
            <param name="parameterKinds">The function parameter kinds.</param>
            <param name="resultKinds">The function result kinds.</param>
        </member>
        <member name="P:Wasmtime.Function.Parameters">
            <summary>
            The types of the parameters of the WebAssembly function.
            </summary>
        </member>
        <member name="P:Wasmtime.Function.Results">
            <summary>
            The types of the results of the WebAssembly function.
            </summary>
        </member>
        <member name="P:Wasmtime.Function.IsNull">
            <summary>
            Determines if the underlying function reference is null.
            </summary>
        </member>
        <member name="P:Wasmtime.Function.Null">
            <summary>
            Represents a null function reference.
            </summary>
        </member>
        <member name="M:Wasmtime.Function.CheckTypeSignature(System.Type,System.Type[])">
            <summary>
            Check if this function has the given type signature
            </summary>
            <param name="returnType">Return type (use a tuple for multiple return types)</param>
            <param name="parameters">The parameters of the function</param>
            <returns>Returns true if the type signature of the function is valid or false if not.</returns>
        </member>
        <member name="M:Wasmtime.Function.InvokeWithReturn``1(System.Span{Wasmtime.ValueRaw},Wasmtime.IReturnTypeFactory{``0},Wasmtime.StoreContext)">
            <summary>
            Invokes the wasmtime function and processes the results through a return type factory.
            Assumes arguments are the correct type, and the span is large enough to also hold the results.
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="argsAndResults">Span of arguments and results.</param>
            <param name="factory">Factory to use to construct the return item</param>
            <param name="storeContext">The <see cref="T:Wasmtime.StoreContext"/> from the <see cref="F:Wasmtime.Function.store"/>.</param>
            <returns>The return value from the function</returns>
        </member>
        <member name="M:Wasmtime.Function.InvokeWithoutReturn(System.Span{Wasmtime.ValueRaw},Wasmtime.StoreContext)">
            <summary>
            Invokes the wasmtime function.
            Assumes arguments are the correct type.
            </summary>
            <param name="arguments">Span of arguments.</param>
            /// <param name="storeContext">The <see cref="T:Wasmtime.StoreContext"/> from the <see cref="F:Wasmtime.Function.store"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.Function.Invoke">
            <summary>
            Invokes the Wasmtime function with no arguments.
            </summary>
            <returns>
              Returns null if the function has no return value.
              Returns the value if the function returns a single value.
              Returns an array of values if the function returns more than one value.
            </returns>
        </member>
        <member name="M:Wasmtime.Function.Invoke(Wasmtime.ValueBox[])">
            <summary>
            Invokes the Wasmtime function.
            </summary>
            <param name="arguments">The array of arguments to pass to the function.</param>
            <returns>
              Returns null if the function has no return value.
              Returns the value if the function returns a single value.
              Returns an array of values if the function returns more than one value.
            </returns>
        </member>
        <member name="M:Wasmtime.Function.Invoke(System.ReadOnlySpan{Wasmtime.ValueBox})">
            <summary>
            Invokes the Wasmtime function.
            </summary>
            <param name="arguments">The arguments to pass to the function, wrapped in `ValueBox`</param>
            <returns>
              Returns null if the function has no return value.
              Returns the value if the function returns a single value.
              Returns an array of values if the function returns more than one value.
            </returns>
        </member>
        <member name="M:Wasmtime.Function.Invoke(System.ReadOnlySpan{Wasmtime.Value},System.Span{Wasmtime.Value})">
            <summary>
            Invokes the Wasmtime function. Assumes arguments are the correct type and return span is the correct size.
            </summary>
            <param name="arguments">The arguments to pass to the function, wrapped as `Value`</param>
            <param name="resultsOut">Output span to store the results in, must be the correct length</param>
            <returns>
              Returns the trap ptr or zero
            </returns>
        </member>
        <member name="M:Wasmtime.Function.Invoke(System.Span{Wasmtime.ValueRaw},Wasmtime.StoreContext)">
            <summary>
            Invokes the Wasmtime function. Assumes arguments are the correct type and the span has the correct size.
            </summary>
            <param name="argumentsAndResults">The span where the function arguments are read from, and the results are written to. The span must have the correct length.</param>
            <param name="storeContext">The <see cref="T:Wasmtime.StoreContext"/> for the <see cref="F:Wasmtime.Function.store"/>.</param>
            <returns>
              Returns the trap ptr or zero
            </returns>
        </member>
        <member name="F:Wasmtime.Function.CallbackErrorCause">
            <summary>
            Contains the cause for a error returned by invoking a wasm function, in case
            the error was caused by the host. 
            </summary>
            <remarks>
            This thread-local field will be set when catching a .NET exception at the
            wasm-to-host transition. When the error bubbles up to the next host-to-wasm
            transition, the field needs to be cleared, and its value can be used to set
            the inner exception of the created <see cref="T:Wasmtime.WasmtimeException"/>.
            </remarks>
        </member>
        <member name="M:Wasmtime.Function.FromCallback(Wasmtime.Store,System.Action)">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``1(Wasmtime.Store,System.Action{``0})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``2(Wasmtime.Store,System.Action{``0,``1})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``3(Wasmtime.Store,System.Action{``0,``1,``2})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,System.Action{``0,``1,``2,``3})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``1(Wasmtime.Store,System.Func{``0})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``2(Wasmtime.Store,System.Func{``0,``1})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``3(Wasmtime.Store,System.Func{``0,``1,``2})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,System.Func{``0,``1,``2,``3})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``13(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``2(Wasmtime.Store,System.Func{System.ValueTuple{``0,``1}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``3(Wasmtime.Store,System.Func{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,System.Func{``0,``1,System.ValueTuple{``2,``3}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,System.Func{``0,``1,``2,System.ValueTuple{``3,``4}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,System.Func{``0,``1,``2,``3,System.ValueTuple{``4,``5}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``13(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``14(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``3(Wasmtime.Store,System.Func{System.ValueTuple{``0,``1,``2}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,System.Func{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,System.Func{``0,``1,System.ValueTuple{``2,``3,``4}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,System.Func{``0,``1,``2,System.ValueTuple{``3,``4,``5}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,System.Func{``0,``1,``2,``3,System.ValueTuple{``4,``5,``6}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6,``7}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7,``8}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9,``10}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10,``11}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``13(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11,``12}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``14(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12,``13}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``15(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13,``14}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,System.Func{System.ValueTuple{``0,``1,``2,``3}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,System.Func{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,System.Func{``0,``1,System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,System.Func{``0,``1,``2,System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,System.Func{``0,``1,``2,``3,System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7,``8,``9}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9,``10,``11}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``13(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10,``11,``12}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``14(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11,``12,``13}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``15(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12,``13,``14}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``16(Wasmtime.Store,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13,``14,``15}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback(Wasmtime.Store,Wasmtime.CallerAction)">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``1(Wasmtime.Store,Wasmtime.CallerAction{``0})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``2(Wasmtime.Store,Wasmtime.CallerAction{``0,``1})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``3(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3,``4})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``1(Wasmtime.Store,Wasmtime.CallerFunc{``0})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``2(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``3(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``13(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``2(Wasmtime.Store,Wasmtime.CallerFunc{System.ValueTuple{``0,``1}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``3(Wasmtime.Store,Wasmtime.CallerFunc{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,System.ValueTuple{``2,``3}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,System.ValueTuple{``3,``4}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,System.ValueTuple{``4,``5}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``13(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``14(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``3(Wasmtime.Store,Wasmtime.CallerFunc{System.ValueTuple{``0,``1,``2}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,Wasmtime.CallerFunc{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,System.ValueTuple{``2,``3,``4}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,System.ValueTuple{``3,``4,``5}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,System.ValueTuple{``4,``5,``6}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6,``7}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7,``8}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9,``10}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10,``11}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``13(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11,``12}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``14(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12,``13}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``15(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13,``14}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``4(Wasmtime.Store,Wasmtime.CallerFunc{System.ValueTuple{``0,``1,``2,``3}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``5(Wasmtime.Store,Wasmtime.CallerFunc{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``6(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``7(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``8(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``9(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``10(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7,``8,``9}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``11(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``12(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9,``10,``11}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``13(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10,``11,``12}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``14(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11,``12,``13}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``15(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12,``13,``14}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.FromCallback``16(Wasmtime.Store,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13,``14,``15}})">
            <summary>
            Creates a function given a callback.
            </summary>
            <param name="store">The store to create the function in.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Function.WrapAction">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``1">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``2">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``3">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``4">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``5">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``6">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``7">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``8">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``9">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``10">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``11">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``12">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``13">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``14">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``15">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapAction``16">
            <summary>
            Attempt to wrap this function as an <c>Action</c>. Wrapped <c>Action</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Action</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``1">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``2">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``3">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``4">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``5">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``6">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``7">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``8">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``9">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``10">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``11">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``12">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``13">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``14">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``15">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``16">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="M:Wasmtime.Function.WrapFunc``17">
            <summary>
            Attempt to wrap this function as a <c>Func</c>. Wrapped <c>Func</c> is faster than a normal Invoke call.
            </summary>
            <returns>A <c>Func</c> to invoke this function, or <c>null</c> if the type signature is incompatible.</returns>
        </member>
        <member name="T:Wasmtime.Mutability">
            <summary>
            Represents the mutability of a WebAssembly global value.
            </summary>
        </member>
        <member name="F:Wasmtime.Mutability.Immutable">
            <summary>
            The global value is immutable (i.e. constant).
            </summary>
        </member>
        <member name="F:Wasmtime.Mutability.Mutable">
            <summary>
            The global value is mutable.
            </summary>
        </member>
        <member name="M:Wasmtime.Mutability.Equals(Wasmtime.Mutability)">
            <inheritdoc />
        </member>
        <member name="M:Wasmtime.Mutability.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wasmtime.Mutability.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wasmtime.Mutability.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wasmtime.Mutability.op_Equality(Wasmtime.Mutability,Wasmtime.Mutability)">
            <summary>
            Compare a to b and return true if they are equal
            </summary>
            <param name="a">First item to compare</param>
            <param name="b">Second item to compare</param>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.Mutability.op_Inequality(Wasmtime.Mutability,Wasmtime.Mutability)">
            <summary>
            Compare a to b and return true if they are not equal
            </summary>
            <param name="a">First item to compare</param>
            <param name="b">Second item to compare</param>
            <returns></returns>
        </member>
        <member name="T:Wasmtime.Global">
            <summary>
            Represents a WebAssembly global value.
            </summary>
        </member>
        <member name="M:Wasmtime.Global.#ctor(Wasmtime.Store,Wasmtime.ValueKind,System.Object,Wasmtime.Mutability)">
            <summary>
            Creates a new WebAssembly global value.
            </summary>
            <param name="store">The store to create the global in.</param>
            <param name="kind">The kind of value stored in the global.</param>
            <param name="initialValue">The global's initial value.</param>
            <param name="mutability">The mutability of the global being created.</param>
        </member>
        <member name="M:Wasmtime.Global.GetValue">
            <summary>
            Gets the value of the global.
            </summary>
            <returns>Returns the global's value.</returns>
        </member>
        <member name="M:Wasmtime.Global.SetValue(System.Object)">
            <summary>
            Sets the value of the global.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Wasmtime.Global.Wrap``1">
            <summary>
            Wrap this global as a specific type, accessing through the wrapper avoids any boxing.
            </summary>
            <typeparam name="T">Type of this global</typeparam>
            <returns>An accessor for this global, or null if the type is incorrect</returns>
        </member>
        <member name="P:Wasmtime.Global.Kind">
            <summary>
            Gets the value kind of the global.
            </summary>
        </member>
        <member name="P:Wasmtime.Global.Mutability">
            <summary>
            Gets the mutability of the global.
            </summary>
        </member>
        <member name="T:Wasmtime.Global.Accessor`1">
            <summary>
            A typed accessor for a WebAssembly global value.
            </summary>
            <typeparam name="T">Type of the global being accessed.</typeparam>
        </member>
        <member name="P:Wasmtime.Global.Accessor`1.Mutability">
            <summary>
            Gets the mutability of the global.
            </summary>
        </member>
        <member name="M:Wasmtime.Global.Accessor`1.GetValue">
            <summary>
            Gets the value of the global.
            </summary>
            <returns>Returns the global's value.</returns>
        </member>
        <member name="M:Wasmtime.Global.Accessor`1.SetValue(`0)">
            <summary>
            Sets the value of the global.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Wasmtime.Import">
            <summary>
            The base class for import types.
            </summary>
        </member>
        <member name="P:Wasmtime.Import.ModuleName">
            <summary>
            The module name of the import.
            </summary>
        </member>
        <member name="P:Wasmtime.Import.Name">
            <summary>
            The name of the import.
            </summary>
        </member>
        <member name="M:Wasmtime.Import.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Wasmtime.FunctionImport">
            <summary>
            Represents a function imported to a WebAssembly module.
            </summary>
        </member>
        <member name="P:Wasmtime.FunctionImport.Parameters">
            <summary>
            The parameter of the exported WebAssembly function.
            </summary>
        </member>
        <member name="P:Wasmtime.FunctionImport.Results">
            <summary>
            The results of the exported WebAssembly function.
            </summary>
        </member>
        <member name="T:Wasmtime.GlobalImport">
            <summary>
            Represents a global variable imported to a WebAssembly module.
            </summary>
        </member>
        <member name="P:Wasmtime.GlobalImport.Kind">
            <summary>
            The kind of value for the global variable.
            </summary>
        </member>
        <member name="P:Wasmtime.GlobalImport.Mutability">
            <summary>
            Gets the mutability of the global.
            </summary>
        </member>
        <member name="T:Wasmtime.MemoryImport">
            <summary>
            Represents a memory imported to a WebAssembly module.
            </summary>
        </member>
        <member name="P:Wasmtime.MemoryImport.Minimum">
            <summary>
            Gets the minimum memory size (in WebAssembly page units).
            </summary>
            <value>The minimum memory size (in WebAssembly page units).</value>
        </member>
        <member name="P:Wasmtime.MemoryImport.Maximum">
            <summary>
            Gets the maximum memory size (in WebAssembly page units).
            </summary>
            <value>The maximum memory size (in WebAssembly page units), or <c>null</c> if no maximum is specified.</value>
        </member>
        <member name="P:Wasmtime.MemoryImport.Is64Bit">
            <summary>
            Gets a value that indicates whether this type of memory represents a 64-bit memory.
            </summary>
            <value><c>true</c> if this type of memory represents a 64-bit memory, <c>false</c> if it represents a 32-bit memory.</value>
        </member>
        <member name="T:Wasmtime.TableImport">
            <summary>
            Represents a table imported to a WebAssembly module.
            </summary>
        </member>
        <member name="P:Wasmtime.TableImport.Kind">
            <summary>
            The value kind of the table.
            </summary>
        </member>
        <member name="P:Wasmtime.TableImport.Minimum">
            <summary>
            The minimum number of elements in the table.
            </summary>
        </member>
        <member name="P:Wasmtime.TableImport.Maximum">
            <summary>
            The maximum number of elements in the table.
            </summary>
        </member>
        <member name="T:Wasmtime.Instance">
            <summary>
            Represents an instantiated WebAssembly module.
            </summary>
        </member>
        <member name="M:Wasmtime.Instance.#ctor(Wasmtime.Store,Wasmtime.Module,System.Object[])">
            <summary>
            Creates a new WebAssembly instance.
            </summary>
            <param name="store">The store to create the instance in.</param>
            <param name="module">The module to create the instance for.</param>
            <param name="imports">The imports for the instance.</param>
        </member>
        <member name="M:Wasmtime.Instance.GetAction(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetAction``1(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">Parameter type</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetAction``2(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetAction``3(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetAction``4(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetAction``5(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``1(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``2(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``3(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``4(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``5(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``6(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``7(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``8(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``9(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``10(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TI">Ninth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``11(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TI">Ninth parameter type</typeparam>
            <typeparam name="TJ">Tenth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``12(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TI">Ninth parameter type</typeparam>
            <typeparam name="TJ">Tenth parameter type</typeparam>
            <typeparam name="TK">Eleventh parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``13(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TI">Ninth parameter type</typeparam>
            <typeparam name="TJ">Tenth parameter type</typeparam>
            <typeparam name="TK">Eleventh parameter type</typeparam>
            <typeparam name="TL">Twelfth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``14(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TI">Ninth parameter type</typeparam>
            <typeparam name="TJ">Tenth parameter type</typeparam>
            <typeparam name="TK">Eleventh parameter type</typeparam>
            <typeparam name="TL">Twelfth parameter type</typeparam>
            <typeparam name="TM">Thirteenth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``15(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TI">Ninth parameter type</typeparam>
            <typeparam name="TJ">Tenth parameter type</typeparam>
            <typeparam name="TK">Eleventh parameter type</typeparam>
            <typeparam name="TL">Twelfth parameter type</typeparam>
            <typeparam name="TM">Thirteenth parameter type</typeparam>
            <typeparam name="TN">Fourteenth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``16(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TI">Ninth parameter type</typeparam>
            <typeparam name="TJ">Tenth parameter type</typeparam>
            <typeparam name="TK">Eleventh parameter type</typeparam>
            <typeparam name="TL">Twelfth parameter type</typeparam>
            <typeparam name="TM">Thirteenth parameter type</typeparam>
            <typeparam name="TN">Fourteenth parameter type</typeparam>
            <typeparam name="TO">Fifteenth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction``17(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <typeparam name="TA">First parameter type</typeparam>
            <typeparam name="TB">Second parameter type</typeparam>
            <typeparam name="TC">Third parameter type</typeparam>
            <typeparam name="TD">Fourth parameter type</typeparam>
            <typeparam name="TE">Fifth parameter type</typeparam>
            <typeparam name="TF">Sixth parameter type</typeparam>
            <typeparam name="TG">Seventh parameter type</typeparam>
            <typeparam name="TH">Eighth parameter type</typeparam>
            <typeparam name="TI">Ninth parameter type</typeparam>
            <typeparam name="TJ">Tenth parameter type</typeparam>
            <typeparam name="TK">Eleventh parameter type</typeparam>
            <typeparam name="TL">Twelfth parameter type</typeparam>
            <typeparam name="TM">Thirteenth parameter type</typeparam>
            <typeparam name="TN">Fourteenth parameter type</typeparam>
            <typeparam name="TO">Fifteenth parameter type</typeparam>
            <typeparam name="TP">Sixteenth parameter type</typeparam>
            <typeparam name="TR">Return type. Use a tuple for multiple return values</typeparam>
            <returns>Returns the function if a function of that name and type was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction(System.String,System.Type,System.Type[])">
            <summary>
            Gets an exported function from the instance and check the type signature.
            </summary>
            <param name="name">The name of the exported function.</param>
            <param name="returnType">The return type of the function. Null if no return type. Tuple of types is multiple returns expected.</param>
            <param name="parameterTypes">The expected parameters to the function</param>
            <returns>Returns the function if a function of that name and type signature was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetFunction(System.String)">
            <summary>
            Gets an exported function from the instance.
            </summary>
            <param name="name">The name of the exported function.</param>
            <returns>Returns the function if a function of that name was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetTable(System.String)">
            <summary>
            Gets an exported table from the instance.
            </summary>
            <param name="name">The name of the exported table.</param>
            <returns>Returns the table if a table of that name was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetMemory(System.String)">
            <summary>
            Gets an exported memory from the instance.
            </summary>
            <param name="name">The name of the exported memory.</param>
            <returns>Returns the memory if a memory of that name was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Instance.GetGlobal(System.String)">
            <summary>
            Gets an exported global from the instance.
            </summary>
            <param name="name">The name of the exported global.</param>
            <returns>Returns the global if a global of that name was exported or null if not.</returns>
        </member>
        <member name="T:Wasmtime.Linker">
            <summary>
            Represents the Wasmtime linker that can be used to define imports
            and instantiate WebAssembly modules.
            </summary>
        </member>
        <member name="M:Wasmtime.Linker.#ctor(Wasmtime.Engine)">
            <summary>
            Constructs a new linker from the given engine.
            </summary>
            <param name="engine">The Wasmtime engine to use for the linker.</param>
        </member>
        <member name="P:Wasmtime.Linker.AllowShadowing">
            <summary>
            Configures whether or not the linker allows later definitions to shadow previous definitions.
            </summary>
        </member>
        <member name="M:Wasmtime.Linker.Define(System.String,System.String,Wasmtime.Function)">
            <summary>
            Defines an item in the linker.
            </summary>
            <param name="module">The module name of the item.</param>
            <param name="name">The name of the item.</param>
            <param name="function">The item being defined</param>
        </member>
        <member name="M:Wasmtime.Linker.Define(System.String,System.String,Wasmtime.Global)">
            <summary>
            Defines an item in the linker.
            </summary>
            <param name="module">The module name of the item.</param>
            <param name="name">The name of the item.</param>
            <param name="global">The item being defined</param>
        </member>
        <member name="M:Wasmtime.Linker.Define``1(System.String,System.String,Wasmtime.Global.Accessor{``0})">
            <summary>
            Defines an item in the linker.
            </summary>
            <param name="module">The module name of the item.</param>
            <param name="name">The name of the item.</param>
            <param name="global">The item being defined</param>
        </member>
        <member name="M:Wasmtime.Linker.Define(System.String,System.String,Wasmtime.Memory)">
            <summary>
            Defines an item in the linker.
            </summary>
            <param name="module">The module name of the item.</param>
            <param name="name">The name of the item.</param>
            <param name="memory">The item being defined</param>
        </member>
        <member name="M:Wasmtime.Linker.Define(System.String,System.String,Wasmtime.Table)">
            <summary>
            Defines an item in the linker.
            </summary>
            <param name="module">The module name of the item.</param>
            <param name="name">The name of the item.</param>
            <param name="table">The item being defined</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineWasi">
            <summary>
            Defines WASI functions in the linker.
            </summary>
            <remarks>
            When WASI functions are defined in the linker, a store must be configured with a WASI
            configuration.
            </remarks>
        </member>
        <member name="M:Wasmtime.Linker.DefineInstance(Wasmtime.Store,System.String,Wasmtime.Instance)">
            <summary>
            Defines an instance with the specified name in the linker.
            </summary>
            <param name="store">The store that owns the instance.</param>
            <param name="name">The name of the instance to define.</param>
            <param name="instance">The instance to define.</param>
        </member>
        <member name="M:Wasmtime.Linker.Instantiate(Wasmtime.Store,Wasmtime.Module)">
            <summary>
            Instantiates a module with imports from items defined in the linker.
            </summary>
            <param name="store">The store to instantiate in.</param>
            <param name="module">The module to instantiate.</param>
            <returns>Returns the new instance.</returns>
        </member>
        <member name="M:Wasmtime.Linker.DefineModule(Wasmtime.Store,Wasmtime.Module)">
            <summary>
            Defines automatic instantiations of a module in this linker.
            </summary>
            <param name="store">The store to instantiate in.</param>
            <param name="module">The module to automatically instantiate.</param>
        </member>
        <member name="M:Wasmtime.Linker.GetDefaultFunction(Wasmtime.Store,System.String)">
            <summary>
            Gets the "default" function export for a module with the given name defined in the linker.
            </summary>
            <param name="store">The store for the function.</param>
            <param name="name">Tha name of the module to get the default function export.</param>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.Linker.GetFunction(Wasmtime.Store,System.String,System.String)">
            <summary>
            Gets an exported function from the linker.
            </summary>
            <param name="store">The store of the function.</param>
            <param name="module">The module of the exported function.</param>
            <param name="name">The name of the exported function.</param>
            <returns>Returns the function if a function of that name was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Linker.GetTable(Wasmtime.Store,System.String,System.String)">
            <summary>
            Gets an exported table from the linker.
            </summary>
            <param name="store">The store of the table.</param>
            <param name="module">The module of the exported table.</param>
            <param name="name">The name of the exported table.</param>
            <returns>Returns the table if a table of that name was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Linker.GetMemory(Wasmtime.Store,System.String,System.String)">
            <summary>
            Gets an exported memory from the linker.
            </summary>
            <param name="store">The store of the memory.</param>
            <param name="module">The module of the exported memory.</param>
            <param name="name">The name of the exported memory.</param>
            <returns>Returns the memory if a memory of that name was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Linker.GetGlobal(Wasmtime.Store,System.String,System.String)">
            <summary>
            Gets an exported global from the linker.
            </summary>
            <param name="store">The store of the global.</param>
            <param name="module">The module of the exported global.</param>
            <param name="name">The name of the exported global.</param>
            <returns>Returns the global if a global of that name was exported or null if not.</returns>
        </member>
        <member name="M:Wasmtime.Linker.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction(System.String,System.String,Wasmtime.Function.UntypedCallbackDelegate,System.Collections.Generic.IReadOnlyList{Wasmtime.ValueKind},System.Collections.Generic.IReadOnlyList{Wasmtime.ValueKind})">
            <summary>
            Defines an function in the linker given an untyped callback.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
            <param name="parameterKinds">The function parameter kinds.</param>
            <param name="resultKinds">The function result kinds.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction(System.String,System.String,System.Action)">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``1(System.String,System.String,System.Action{``0})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``2(System.String,System.String,System.Action{``0,``1})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``3(System.String,System.String,System.Action{``0,``1,``2})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,System.Action{``0,``1,``2,``3})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``1(System.String,System.String,System.Func{``0})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``2(System.String,System.String,System.Func{``0,``1})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``3(System.String,System.String,System.Func{``0,``1,``2})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,System.Func{``0,``1,``2,``3})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``13(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``2(System.String,System.String,System.Func{System.ValueTuple{``0,``1}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``3(System.String,System.String,System.Func{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,System.Func{``0,``1,System.ValueTuple{``2,``3}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,System.Func{``0,``1,``2,System.ValueTuple{``3,``4}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,System.Func{``0,``1,``2,``3,System.ValueTuple{``4,``5}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,System.Func{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``13(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``14(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``3(System.String,System.String,System.Func{System.ValueTuple{``0,``1,``2}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,System.Func{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,System.Func{``0,``1,System.ValueTuple{``2,``3,``4}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,System.Func{``0,``1,``2,System.ValueTuple{``3,``4,``5}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,System.Func{``0,``1,``2,``3,System.ValueTuple{``4,``5,``6}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,System.Func{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6,``7}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7,``8}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9,``10}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10,``11}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``13(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11,``12}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``14(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12,``13}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``15(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13,``14}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,System.Func{System.ValueTuple{``0,``1,``2,``3}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,System.Func{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,System.Func{``0,``1,System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,System.Func{``0,``1,``2,System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,System.Func{``0,``1,``2,``3,System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,System.Func{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7,``8,``9}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9,``10,``11}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``13(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10,``11,``12}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``14(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11,``12,``13}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``15(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12,``13,``14}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``16(System.String,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13,``14,``15}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction(System.String,System.String,Wasmtime.CallerAction)">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``1(System.String,System.String,Wasmtime.CallerAction{``0})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``2(System.String,System.String,Wasmtime.CallerAction{``0,``1})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``3(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3,``4})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,Wasmtime.CallerAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``1(System.String,System.String,Wasmtime.CallerFunc{``0})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``2(System.String,System.String,Wasmtime.CallerFunc{``0,``1})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``3(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``13(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``2(System.String,System.String,Wasmtime.CallerFunc{System.ValueTuple{``0,``1}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``3(System.String,System.String,Wasmtime.CallerFunc{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,Wasmtime.CallerFunc{``0,``1,System.ValueTuple{``2,``3}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,System.ValueTuple{``3,``4}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,System.ValueTuple{``4,``5}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``13(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``14(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``3(System.String,System.String,Wasmtime.CallerFunc{System.ValueTuple{``0,``1,``2}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,Wasmtime.CallerFunc{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,Wasmtime.CallerFunc{``0,``1,System.ValueTuple{``2,``3,``4}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,System.ValueTuple{``3,``4,``5}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,System.ValueTuple{``4,``5,``6}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6,``7}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7,``8}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9,``10}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10,``11}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``13(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11,``12}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``14(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12,``13}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``15(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13,``14}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``4(System.String,System.String,Wasmtime.CallerFunc{System.ValueTuple{``0,``1,``2,``3}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``5(System.String,System.String,Wasmtime.CallerFunc{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``6(System.String,System.String,Wasmtime.CallerFunc{``0,``1,System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``7(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``8(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``9(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``10(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,System.ValueTuple{``6,``7,``8,``9}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``11(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``12(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9,``10,``11}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``13(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10,``11,``12}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``14(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11,``12,``13}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``15(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12,``13,``14}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="M:Wasmtime.Linker.DefineFunction``16(System.String,System.String,Wasmtime.CallerFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13,``14,``15}})">
            <summary>
            Defines a function in the linker.
            </summary>
            <remarks>Functions defined with this method are store-independent.</remarks>
            <param name="module">The module name of the function.</param>
            <param name="name">The name of the function.</param>
            <param name="callback">The callback for when the function is invoked.</param>
        </member>
        <member name="T:Wasmtime.Memory">
            <summary>
            Represents a WebAssembly memory.
            </summary>
        </member>
        <member name="M:Wasmtime.Memory.#ctor(Wasmtime.Store,System.Int64,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Creates a new WebAssembly memory.
            </summary>
            <param name="store">The store to create the memory in.</param>
            <param name="minimum">The minimum number of WebAssembly pages.</param>
            <param name="maximum">The maximum number of WebAssembly pages, or <c>null</c> to not specify a maximum.</param>
            <param name="is64Bit"><c>true</c> when memory type represents a 64-bit memory, <c>false</c> when it represents a 32-bit memory.</param>
        </member>
        <member name="F:Wasmtime.Memory.PageSize">
            <summary>
            The size, in bytes, of a WebAssembly memory page.
            </summary>
        </member>
        <member name="P:Wasmtime.Memory.Minimum">
            <summary>
            Gets the minimum memory size (in WebAssembly page units).
            </summary>
            <value>The minimum memory size (in WebAssembly page units).</value>
        </member>
        <member name="P:Wasmtime.Memory.Maximum">
            <summary>
            Gets the maximum memory size (in WebAssembly page units).
            </summary>
            <value>The maximum memory size (in WebAssembly page units), or <c>null</c> if no maximum is specified.</value>
        </member>
        <member name="P:Wasmtime.Memory.Is64Bit">
            <summary>
            Gets a value that indicates whether this type of memory represents a 64-bit memory.
            </summary>
            <value><c>true</c> if this type of memory represents a 64-bit memory, <c>false</c> otherwise.</value>
        </member>
        <member name="M:Wasmtime.Memory.GetSize">
            <summary>
            Gets the current size of the memory, in WebAssembly page units.
            </summary>
            <returns>Returns the current size of the memory, in WebAssembly page units.</returns>
        </member>
        <member name="M:Wasmtime.Memory.GetLength">
            <summary>
            Gets the current length of the memory, in bytes.
            </summary>
            <returns>Returns the current length of the memory, in bytes.</returns>
        </member>
        <member name="M:Wasmtime.Memory.GetPointer">
             <summary>
             Returns a pointer to the start of the memory. The length for which the pointer
             is valid can be retrieved with <see cref="M:Wasmtime.Memory.GetLength"/>.
             </summary>
             <returns>Returns a pointer to the start of the memory.</returns>
             <remarks>
             <para>
             The pointer may become invalid if the memory grows.
            
             This may happen if the memory is explicitly requested to grow or
             grows as a result of WebAssembly execution.
             </para>
             <para>
             Therefore, the returned pointer should not be used after calling the grow method or
             after calling into WebAssembly code.
             </para>
             </remarks>
        </member>
        <member name="M:Wasmtime.Memory.GetSpan">
             <summary>
             Gets the span of the memory.
             </summary>
             <returns>Returns the span of the memory.</returns>
             <exception cref="T:System.OverflowException">The memory has more than 32767 pages.</exception>
             <remarks>
             <para>
             The span may become invalid if the memory grows.
            
             This may happen if the memory is explicitly requested to grow or
             grows as a result of WebAssembly execution.
             </para>
             <para>
             Therefore, the returned span should not be used after calling the grow method or
             after calling into WebAssembly code.
             </para>
             </remarks>
        </member>
        <member name="M:Wasmtime.Memory.GetSpan(System.Int64,System.Int32)">
            <summary>
            Gets a span of a section of the memory.
            </summary>
            <returns>Returns the span of a section of the memory.</returns>
            <param name="address">The zero-based address of the start of the span.</param>
            <param name="length">The length of the span.</param>
            <remarks>
            <para>
            The span may become invalid if the memory grows.
            
            This may happen if the memory is explicitly requested to grow or
            grows as a result of WebAssembly execution.
            </para>
            <para>
            Therefore, the returned span should not be used after calling the grow method or
            after calling into WebAssembly code.
            </para>
            </remarks>
        </member>
        <member name="M:Wasmtime.Memory.GetSpan``1(System.Int32)">
             <summary>
             Gets the span of the memory viewed as a specific type, starting at a given address.
             </summary>
             <param name="address">The zero-based address of the start of the span.</param>
             <returns>Returns the span of the memory.</returns>
             <exception cref="T:System.OverflowException">The memory exceeds the byte length that can be 
             represented by a <see cref="T:System.Span`1"/>.</exception>
             <remarks>
             <para>
             The span may become invalid if the memory grows.
            
             This may happen if the memory is explicitly requested to grow or
             grows as a result of WebAssembly execution.
             </para>
             <para>
             Therefore, the returned span should not be used after calling the grow method or
             after calling into WebAssembly code.
             </para>
             <para>
             Note that WebAssembly always uses little endian as byte order. On platforms 
             that use big endian, you will need to convert numeric values accordingly.
             </para>
             </remarks>
        </member>
        <member name="M:Wasmtime.Memory.GetSpan``1(System.Int64,System.Int32)">
             <summary>
             Gets a span of a section of the memory.
             </summary>
             <returns>Returns the span of a section of the memory.</returns>
             <param name="address">The zero-based address of the start of the span.</param>
             <param name="length">The length of the span.</param>
             <remarks>
             <para>
             The span may become invalid if the memory grows.
            
             This may happen if the memory is explicitly requested to grow or
             grows as a result of WebAssembly execution.
             </para>
             <para>
             Therefore, the returned span should not be used after calling the grow method or
             after calling into WebAssembly code.
             </para>
             <para>
             Note that WebAssembly always uses little endian as byte order. On platforms 
             that use big endian, you will need to convert numeric values accordingly.
             </para>
             </remarks>
        </member>
        <member name="M:Wasmtime.Memory.Read``1(System.Int64)">
            <summary>
            Read a struct from memory.
            </summary>
            <typeparam name="T">Type of the struct to read. Ensure layout in C# is identical to layout in WASM.</typeparam>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the struct read from memory.</returns>
            <remarks>
            <para>
            Note that WebAssembly always uses little endian as byte order. On platforms 
            that use big endian, you will need to convert numeric values accordingly.
            </para>
            </remarks>
        </member>
        <member name="M:Wasmtime.Memory.Write``1(System.Int64,``0)">
            <summary>
            Write a struct to memory.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="address">The zero-based address to read from.</param>
            <param name="value">The struct to write.</param>
            <remarks>
            <para>
            Note that WebAssembly always uses little endian as byte order. On platforms 
            that use big endian, you will need to convert numeric values accordingly.
            </para>
            </remarks>
        </member>
        <member name="M:Wasmtime.Memory.ReadString(System.Int64,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string from memory with the specified encoding.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <param name="length">The length of bytes to read.</param>
            <param name="encoding">The encoding to use when reading the string; if null, UTF-8 encoding is used.</param>
            <returns>Returns the string read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.ReadNullTerminatedString(System.Int64)">
            <summary>
            Reads a null-terminated UTF-8 string from memory.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the string read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.WriteString(System.Int64,System.String,System.Text.Encoding)">
            <summary>
            Writes a string at the given address with the given encoding.
            </summary>
            <param name="address">The zero-based address to write to.</param>
            <param name="value">The string to write.</param>
            <param name="encoding">The encoding to use when writing the string; if null, UTF-8 encoding is used.</param>
            <return>Returns the number of bytes written.</return>
        </member>
        <member name="M:Wasmtime.Memory.ReadByte(System.Int64)">
            <summary>
            Reads a byte from memory.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the byte read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.WriteByte(System.Int64,System.Byte)">
            <summary>
            Writes a byte to memory.
            </summary>
            <param name="address">The zero-based address to write to.</param>
            <param name="value">The byte to write.</param>
        </member>
        <member name="M:Wasmtime.Memory.ReadInt16(System.Int64)">
            <summary>
            Reads a short from memory.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the short read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.WriteInt16(System.Int64,System.Int16)">
            <summary>
            Writes a short to memory.
            </summary>
            <param name="address">The zero-based address to write to.</param>
            <param name="value">The short to write.</param>
        </member>
        <member name="M:Wasmtime.Memory.ReadInt32(System.Int64)">
            <summary>
            Reads an int from memory.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the int read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.WriteInt32(System.Int64,System.Int32)">
            <summary>
            Writes an int to memory.
            </summary>
            <param name="address">The zero-based address to write to.</param>
            <param name="value">The int to write.</param>
        </member>
        <member name="M:Wasmtime.Memory.ReadInt64(System.Int64)">
            <summary>
            Reads a long from memory.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the long read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.WriteInt64(System.Int64,System.Int64)">
            <summary>
            Writes a long to memory.
            </summary>
            <param name="address">The zero-based address to write to.</param>
            <param name="value">The long to write.</param>
        </member>
        <member name="M:Wasmtime.Memory.ReadIntPtr(System.Int64)">
            <summary>
            Reads an IntPtr from memory.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the IntPtr read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.WriteIntPtr(System.Int64,System.IntPtr)">
            <summary>
            Writes an IntPtr to memory.
            </summary>
            <param name="address">The zero-based address to write to.</param>
            <param name="value">The IntPtr to write.</param>
        </member>
        <member name="M:Wasmtime.Memory.ReadSingle(System.Int64)">
            <summary>
            Reads a single from memory.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the single read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.WriteSingle(System.Int64,System.Single)">
            <summary>
            Writes a single to memory.
            </summary>
            <param name="address">The zero-based address to write to.</param>
            <param name="value">The single to write.</param>
        </member>
        <member name="M:Wasmtime.Memory.ReadDouble(System.Int64)">
            <summary>
            Reads a double from memory.
            </summary>
            <param name="address">The zero-based address to read from.</param>
            <returns>Returns the double read from memory.</returns>
        </member>
        <member name="M:Wasmtime.Memory.WriteDouble(System.Int64,System.Double)">
            <summary>
            Writes a double to memory.
            </summary>
            <param name="address">The zero-based address to write to.</param>
            <param name="value">The double to write.</param>
        </member>
        <member name="M:Wasmtime.Memory.Grow(System.Int64)">
            <summary>
            Grows the memory by the specified number of pages.
            </summary>
            <param name="delta">The number of WebAssembly pages to grow the memory by.</param>
            <returns>Returns the previous size of the Webassembly memory, in pages.</returns>
            <remarks>This method will invalidate previously returned values from `GetSpan`.</remarks>
        </member>
        <member name="T:Wasmtime.Module">
            <summary>
            Represents a WebAssembly module.
            </summary>
        </member>
        <member name="P:Wasmtime.Module.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="P:Wasmtime.Module.Imports">
            <summary>
            The imports of the module.
            </summary>
        </member>
        <member name="P:Wasmtime.Module.Exports">
            <summary>
            The exports of the module.
            </summary>
        </member>
        <member name="M:Wasmtime.Module.Validate(Wasmtime.Engine,System.ReadOnlySpan{System.Byte})">
            <summary>
            Validates the given WebAssembly module.
            </summary>
            <param name="engine">The engine to use for validation.</param>
            <param name="bytes">The bytes of the WebAssembly module to validate.</param>
            <returns>Returns null if the module is valid or an error message if the module is invalid.</returns>
        </member>
        <member name="M:Wasmtime.Module.FromBytes(Wasmtime.Engine,System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates a <see cref="T:Wasmtime.Module"/> given the module name and bytes.
            </summary>
            <param name="engine">The engine to use for the module.</param>
            <param name="name">The name of the module.</param>
            <param name="bytes">The bytes of the module.</param>
            <returns>Returns a new <see cref="T:Wasmtime.Module"/>.</returns>
        </member>
        <member name="M:Wasmtime.Module.FromFile(Wasmtime.Engine,System.String)">
            <summary>
            Creates a <see cref="T:Wasmtime.Module"/> given the path to the WebAssembly file.
            </summary>
            <param name="engine">The engine to use for the module.</param>
            <param name="path">The path to the WebAssembly file.</param>
            <returns>Returns a new <see cref="T:Wasmtime.Module"/>.</returns>
        </member>
        <member name="M:Wasmtime.Module.FromStream(Wasmtime.Engine,System.String,System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Wasmtime.Module"/> from a stream.
            </summary>
            <param name="engine">The engine to use for the module.</param>
            <param name="name">The name of the module.</param>
            <param name="stream">The stream of the module data.</param>
            <returns>Returns a new <see cref="T:Wasmtime.Module"/>.</returns>
        </member>
        <member name="M:Wasmtime.Module.FromText(Wasmtime.Engine,System.String,System.String)">
            <summary>
            Creates a <see cref="T:Wasmtime.Module"/> based on a WebAssembly text format representation.
            </summary>
            <param name="engine">The engine to use for the module.</param>
            <param name="name">The name of the module.</param>
            <param name="text">The WebAssembly text format representation of the module.</param>
            <returns>Returns a new <see cref="T:Wasmtime.Module"/>.</returns>
        </member>
        <member name="M:Wasmtime.Module.FromTextFile(Wasmtime.Engine,System.String)">
            <summary>
            Creates a <see cref="T:Wasmtime.Module"/> based on the path to a WebAssembly text format file.
            </summary>
            <param name="engine">The engine to use for the module.</param>
            <param name="path">The path to the WebAssembly text format file.</param>
            <returns>Returns a new <see cref="T:Wasmtime.Module"/>.</returns>
        </member>
        <member name="M:Wasmtime.Module.FromTextStream(Wasmtime.Engine,System.String,System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Wasmtime.Module"/> from a WebAssembly text format stream.
            </summary>
            <param name="engine">The engine to use for the module.</param>
            <param name="name">The name of the module.</param>
            <param name="stream">The stream of the module data.</param>
            <returns>Returns a new <see cref="T:Wasmtime.Module"/>.</returns>
        </member>
        <member name="M:Wasmtime.Module.Serialize">
            <summary>
            Serializes the module to an array of bytes.
            </summary>
            <returns>Returns the serialized module as an array of bytes.</returns>
        </member>
        <member name="M:Wasmtime.Module.Deserialize(Wasmtime.Engine,System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserializes a previously serialized module from a span of bytes.
            </summary>
            <param name="engine">The engine to use to deserialize the module.</param>
            <param name="name">The name of the module being deserialized.</param>
            <param name="bytes">The previously serialized module bytes.</param>
            <returns>Returns the <see cref="T:Wasmtime.Module" /> that was previously serialized.</returns>
            <remarks>The passed bytes must come from a previous call to <see cref="M:Wasmtime.Module.Serialize" />.</remarks>
        </member>
        <member name="M:Wasmtime.Module.DeserializeFile(Wasmtime.Engine,System.String,System.String)">
            <summary>
            Deserializes a previously serialized module from a file.
            </summary>
            <param name="engine">The engine to deserialize the module with.</param>
            <param name="name">The name of the deserialized module.</param>
            <param name="path">The path to the previously serialized module.</param>
            <returns>Returns the <see cref="T:Wasmtime.Module" /> that was previously serialized.</returns>
            <remarks>The file's contents must come from a previous call to <see cref="M:Wasmtime.Module.Serialize" />.</remarks>
        </member>
        <member name="M:Wasmtime.Module.ConvertText(System.String)">
            <summary>
            Convert WAT (Web Assembly Text) into WASM bytes
            </summary>
            <param name="wat">A string containing WAT (Web Assembly Text)</param>
            <returns>Returns a byte array containing the WebAssembly module represented by the given text.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if text is null</exception>
            <exception cref="T:Wasmtime.WasmtimeException">Thrown if text is not valid WAT</exception>
        </member>
        <member name="M:Wasmtime.Module.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Wasmtime.ResultType">
            <summary>
            Indicates what type of result this is
            </summary>
        </member>
        <member name="F:Wasmtime.ResultType.Ok">
            <summary>
            Excecution succeeded
            </summary>
        </member>
        <member name="F:Wasmtime.ResultType.Trap">
            <summary>
            Result contains a trap
            </summary>
        </member>
        <member name="T:Wasmtime.ActionResult">
            <summary>
            A result from a function call which does not produce a value, represents either a successful call or a trap
            </summary>
        </member>
        <member name="P:Wasmtime.ActionResult.Type">
            <summary>
            Indicates what type of result this contains
            </summary>
        </member>
        <member name="P:Wasmtime.ActionResult.Trap">
            <summary>
            Get the trap associated with this result
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this Type != Types.Trap</exception>
        </member>
        <member name="T:Wasmtime.IActionResult`2">
            <summary>
            Indicates that the type implementing this interface is a "Result" type for actions (i.e. functions without a return value).
            This means that the function WASM call will use the TBuilder type to create an instance of the TResult type and return that.
            This can be used by advanced users to extract the necessary information from a trap result.
            </summary>
            <typeparam name="TResult">Type of this result type.</typeparam>
            <typeparam name="TBuilder">Type of the builder used to construct TResult</typeparam>
        </member>
        <member name="T:Wasmtime.IActionResultBuilder`1">
            <summary>
            A factory which constructs instances of result types which do not contain a return value.
            </summary>
            <typeparam name="TResult">Type being constructed</typeparam>
        </member>
        <member name="M:Wasmtime.IActionResultBuilder`1.Create">
            <summary>
            Create an new instance indicating a successful call.
            </summary>
            <returns>A new TResult instance representing a successful function call</returns>
        </member>
        <member name="M:Wasmtime.IActionResultBuilder`1.Create(Wasmtime.TrapAccessor)">
            <summary>
            Create a new instance indicating a trap result.
            </summary>
            <param name="accessor"></param>
            <returns>A new TResult instance representing a trap result</returns>
        </member>
        <member name="T:Wasmtime.FunctionResult`1">
            <summary>
            A result from a function call which may represent a Value or a Trap
            </summary>
            <typeparam name="T">Type of the return value contained in this result</typeparam>
        </member>
        <member name="P:Wasmtime.FunctionResult`1.Type">
            <summary>
            Indicates what type of result this contains
            </summary>
        </member>
        <member name="M:Wasmtime.FunctionResult`1.op_Explicit(Wasmtime.FunctionResult{`0})~`0">
            <summary>
            Convert this result into a value, throw if it is a Trap
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Wasmtime.TrapException">Thrown if Type == Trap</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if Type property contains an unknown value</exception>
        </member>
        <member name="P:Wasmtime.FunctionResult`1.Value">
            <summary>
            Get the value associated with this result
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this Type != Types.Value</exception>
        </member>
        <member name="P:Wasmtime.FunctionResult`1.Trap">
            <summary>
            Get the trap associated with this result
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this Type != Types.Trap</exception>
        </member>
        <member name="T:Wasmtime.IFunctionResult`3">
            <summary>
            Indicates that the type implementing this interface is a "Result" type for function.
            This means that the function WASM call will use the TBuilder type to create an instance of the TSelf type and return that.
            This can be used by advanced users to extract the necessary information from a trap result.
            </summary>
            <typeparam name="TResult">Type of this result type.</typeparam>
            <typeparam name="TBuilder">Type of the builder used to construct TResult</typeparam>
            <typeparam name="TOk">Type contained in the result in the success case</typeparam>
        </member>
        <member name="T:Wasmtime.IFunctionResultBuilder`2">
            <summary>
            A factory which constructs instances of result types which contain a return value.
            </summary>
            <typeparam name="TResult">Type being constructed</typeparam>
            <typeparam name="TOk">Type contained in the result in the success case</typeparam>
        </member>
        <member name="M:Wasmtime.IFunctionResultBuilder`2.Create(`1)">
            <summary>
            Create an new instance indicating a successful call.
            </summary>
            <param name="value">The return value of the function call</param>
            <returns>A new TResult instance representing a successful function call</returns>
        </member>
        <member name="M:Wasmtime.IFunctionResultBuilder`2.Create(Wasmtime.TrapAccessor)">
            <summary>
            Create a new instance indicating a trap result.
            </summary>
            <param name="accessor">Provides access to query information about a trap</param>
            <returns>A new TResult instance representing a trap result</returns>
        </member>
        <member name="M:Wasmtime.ReturnTypeFactory`1.GetTupleTypes">
            <summary>
            If `TReturn` is a tuple get a list of types it contains, otherwise return null
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wasmtime.StoreContext">
            <summary>
            Represents context about a <see cref="T:Wasmtime.Store"/>.
            </summary>
        </member>
        <member name="M:Wasmtime.StoreContext.SetEpochDeadline(System.UInt64)">
            <summary>
            Configures the relative deadline at which point WebAssembly code will trap.
            </summary>
            <param name="deadline"></param>
        </member>
        <member name="T:Wasmtime.Store">
            <summary>
            Represents a Wasmtime store.
            </summary>
            <remarks>
            A Wasmtime store may be sent between threads but cannot be used from more than one thread
            simultaneously.
            </remarks>
        </member>
        <member name="M:Wasmtime.Store.#ctor(Wasmtime.Engine)">
            <summary>
            Constructs a new store.
            </summary>
            <param name="engine">The engine to use for the store.</param>
        </member>
        <member name="M:Wasmtime.Store.#ctor(Wasmtime.Engine,System.Object)">
            <summary>
            Constructs a new store with the given context data.
            </summary>
            <param name="engine">The engine to use for the store.</param>
            <param name="data">The data to initialize the store with; this can later be accessed with the GetData function.</param>
        </member>
        <member name="P:Wasmtime.Store.Fuel">
            <summary>
            Gets or sets the fuel available for WebAssembly code to consume while executing.
            </summary>
            <remarks>
            <para>
            For this property to work fuel consumption must be enabled via <see cref="M:Wasmtime.Config.WithFuelConsumption(System.Boolean)"/>.
            </para>
            <para>
            WebAssembly execution will automatically consume fuel but if so desired the embedder can also consume fuel manually
            to account for relative costs of host functions, for example.
            </para>
            </remarks>
            <value>The fuel available for WebAssembly code to consume while executing.</value>
        </member>
        <member name="M:Wasmtime.Store.SetLimits(System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Limit the resources that this store may consume. Note that the limits are only used to limit the creation/growth of resources in the future,
            this does not retroactively attempt to apply limits to the store.
            </summary>
            <param name="memorySize">the maximum number of bytes a linear memory can grow to. Growing a linear memory beyond this limit will fail.
            Pass in a null value to use the default value (unlimited)</param>
            <param name="tableElements">the maximum number of elements in a table. Growing a table beyond this limit will fail.
            Pass in a null value to use the default value (unlimited)</param>
            <param name="instances">the maximum number of instances that can be created for a Store. Module instantiation will fail if this limit is exceeded.
            Pass in a null value to use the default value (10000)</param>
            <param name="tables">the maximum number of tables that can be created for a Store. Module instantiation will fail if this limit is exceeded.
            Pass in a null value to use the default value (10000)</param>
            <param name="memories">the maximum number of linear memories that can be created for a Store. Instantiation will fail with an error if this limit is exceeded.
            Pass in a null value to use the default value (10000)</param>
        </member>
        <member name="M:Wasmtime.Store.GC">
            <summary>
            Perform garbage collection within the given store.
            </summary>
        </member>
        <member name="M:Wasmtime.Store.SetWasiConfiguration(Wasmtime.WasiConfiguration)">
            <summary>
            Configures WASI within the store.
            </summary>
            <param name="config">The WASI configuration to use.</param>
        </member>
        <member name="M:Wasmtime.Store.SetEpochDeadline(System.UInt64)">
            <summary>
            Configures the relative deadline at which point WebAssembly code will trap.
            </summary>
            <param name="ticksBeyondCurrent"></param>
        </member>
        <member name="M:Wasmtime.Store.GetData">
            <summary>
            Retrieves the data stored in the Store context
            </summary>
        </member>
        <member name="M:Wasmtime.Store.SetData(System.Object)">
            <summary>
            Replaces the data stored in the Store context 
            </summary>
        </member>
        <member name="P:Wasmtime.Store.Context">
            <summary>
            Gets the context of the store.
            </summary>
            <remarks>
            Note: Generally, you must keep the <see cref="T:Wasmtime.Store"/> alive (by using
            <see cref="M:System.GC.KeepAlive(System.Object)"/>) until the <see cref="T:Wasmtime.StoreContext"/> is no longer
            used, to prevent the the <see cref="T:Wasmtime.Store.Handle"/> finalizer from prematurely deleting the
            store handle in the GC finalizer thread while the <see cref="T:Wasmtime.StoreContext"/> is still
            in use.
            </remarks>
        </member>
        <member name="M:Wasmtime.Store.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Wasmtime.TableKind">
            <summary>
            Represents the possible kinds of WebAssembly values stored in a table
            </summary>
        </member>
        <member name="F:Wasmtime.TableKind.FuncRef">
            <summary>
            The value is a function reference.
            </summary>
        </member>
        <member name="F:Wasmtime.TableKind.ExternRef">
            <summary>
            The value is an external reference.
            </summary>
        </member>
        <member name="T:Wasmtime.Table">
            <summary>
            Represents a WebAssembly table.
            </summary>
        </member>
        <member name="M:Wasmtime.Table.#ctor(Wasmtime.Store,Wasmtime.ValueKind,System.Object,System.UInt32,System.UInt32)">
            <summary>
            Creates a new WebAssembly table.
            </summary>
            <param name="store">The store to create the table in.</param>
            <param name="kind">The value kind for the elements in the table.</param>
            <param name="initialValue">The initial value for elements in the table.</param>
            <param name="initial">The number of initial elements in the table.</param>
            <param name="maximum">The maximum number of elements in the table.</param>
        </member>
        <member name="M:Wasmtime.Table.#ctor(Wasmtime.Store,Wasmtime.TableKind,System.Object,System.UInt32,System.UInt32)">
            <summary>
            Creates a new WebAssembly table.
            </summary>
            <param name="store">The store to create the table in.</param>
            <param name="kind">The value kind for the elements in the table.</param>
            <param name="initialValue">The initial value for elements in the table.</param>
            <param name="initial">The number of initial elements in the table.</param>
            <param name="maximum">The maximum number of elements in the table.</param>
        </member>
        <member name="P:Wasmtime.Table.Kind">
            <summary>
            Gets the value kind of the table.
            </summary>
            <value></value>
        </member>
        <member name="P:Wasmtime.Table.Minimum">
            <summary>
            The minimum table element size.
            </summary>
        </member>
        <member name="P:Wasmtime.Table.Maximum">
            <summary>
            The maximum table element size.
            </summary>
        </member>
        <member name="M:Wasmtime.Table.GetElement(System.UInt32)">
            <summary>
            Gets an element from the table.
            </summary>
            <param name="index">The index in the table to get the element of.</param>
            <returns>Returns the table element.</returns>
        </member>
        <member name="M:Wasmtime.Table.SetElement(System.UInt32,System.Object)">
            <summary>
            Sets an element in the table.
            </summary>
            <param name="index">The index in the table to set the element of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Wasmtime.Table.GetSize">
            <summary>
            Gets the current size of the table.
            </summary>
            <value>Returns the current size of the table.</value>
        </member>
        <member name="M:Wasmtime.Table.Grow(System.UInt32,System.Object)">
            <summary>
            Grows the table by the given number of elements.
            </summary>
            <param name="delta">The number of elements to grow the table.</param>
            <param name="initialValue">The initial value for the new elements.</param>
            <returns>Returns the previous number of elements in the table.</returns>
        </member>
        <member name="M:Wasmtime.TemporaryAllocation.Dispose">
            <summary>
            Recycle rented memory
            </summary>
        </member>
        <member name="T:Wasmtime.TrapCode">
            <summary>
            Represents the code associated with a trap.
            </summary>
        </member>
        <member name="F:Wasmtime.TrapCode.Undefined">
            <summary>
            The trap has no associated trap code.
            </summary>
        </member>
        <member name="F:Wasmtime.TrapCode.StackOverflow">
            <summary>The trap was the result of exhausting the available stack space.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.MemoryOutOfBounds">
            <summary>The trap was the result of an out-of-bounds memory access.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.HeapMisaligned">
            <summary>The trap was the result of a wasm atomic operation that was presented with a misaligned linear-memory address.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.TableOutOfBounds">
            <summary>The trap was the result of an out-of-bounds access to a table.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.IndirectCallToNull">
            <summary>The trap was the result of an indirect call to a null table entry.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.BadSignature">
            <summary>The trap was the result of a signature mismatch on indirect call.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.IntegerOverflow">
            <summary>The trap was the result of an integer arithmetic operation that overflowed.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.IntegerDivisionByZero">
            <summary>The trap was the result of an integer division by zero.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.BadConversionToInteger">
            <summary>The trap was the result of a failed float-to-int conversion.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.Unreachable">
            <summary>The trap was the result of executing the `unreachable` instruction.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.Interrupt">
            <summary>The trap was the result of interrupting execution.</summary>
        </member>
        <member name="F:Wasmtime.TrapCode.OutOfFuel">
            <summary>The trap was the result of running out of the configured fuel amount.</summary>
        </member>
        <member name="T:Wasmtime.TrapFrame">
            <summary>
            Represents a WebAssembly trap frame.
            </summary>
        </member>
        <member name="P:Wasmtime.TrapFrame.FunctionOffset">
            <summary>
            Gets the frame's byte offset from the start of the function.
            </summary>
        </member>
        <member name="P:Wasmtime.TrapFrame.FunctionName">
            <summary>
            Gets the frame's function name.
            </summary>
        </member>
        <member name="P:Wasmtime.TrapFrame.ModuleOffset">
            <summary>
            Gets the frame's module offset from the start of the module.
            </summary>
        </member>
        <member name="P:Wasmtime.TrapFrame.ModuleName">
            <summary>
            Gets the frame's module name.
            </summary>
        </member>
        <member name="T:Wasmtime.TrapAccessor">
            <summary>
            Provides access to a WebAssembly trap result
            </summary>
        </member>
        <member name="P:Wasmtime.TrapAccessor.TrapCode">
            <summary>
            Get the TrapCode
            </summary>
        </member>
        <member name="P:Wasmtime.TrapAccessor.Message">
            <summary>
            Get the message string
            </summary>
        </member>
        <member name="M:Wasmtime.TrapAccessor.GetMessageBytes(System.Span{System.Byte},System.Int32)">
            <summary>
            Copy the bytes of the message into a span
            </summary>
            <param name="output">Destination span to write bytes to</param>
            <param name="offset">Offset in the source span to begin copying from</param>
            <returns>The total length of the source span</returns>
        </member>
        <member name="M:Wasmtime.TrapAccessor.GetFrames">
            <summary>
            Get the trap frames
            </summary>
            <returns>A list of stack frames indicating where the trap occured, the first item in the list represents the innermost stack frame</returns>
        </member>
        <member name="M:Wasmtime.TrapAccessor.GetException">
            <summary>
            Get a TrapException which contains all information about this trap
            </summary>
            <returns>A TrapException object which contains all the information about this trap in one convenient wrapper</returns>
        </member>
        <member name="T:Wasmtime.TrapException">
            <summary>
            The exception for WebAssembly traps.
            </summary>
        </member>
        <member name="M:Wasmtime.TrapException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Wasmtime.TrapException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Wasmtime.TrapException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="P:Wasmtime.TrapException.Type">
            <summary>
            Indentifies which type of trap this is.
            </summary>
        </member>
        <member name="M:Wasmtime.TrapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Wasmtime.V128">
            <summary>
            A 128 bit value
            </summary>
        </member>
        <member name="F:Wasmtime.V128.AllBitsSet">
            <summary>
            Get a V128 with all bits set to 1
            </summary>
        </member>
        <member name="M:Wasmtime.V128.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Construct a new V128 from a 16 element byte span
            </summary>
            <param name="bytes">The bytes to construct the V128 with.</param>
            <exception cref="T:System.ArgumentException">Thrown if the number of bytes in the span is not 16.</exception>
        </member>
        <member name="M:Wasmtime.V128.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a new V128 from 16 bytes
            </summary>
            <param name="b0">First byte.</param>
            <param name="b1">Second byte.</param>
            <param name="b2">Third byte.</param>
            <param name="b3">Fourth byte.</param>
            <param name="b4">Fifth byte.</param>
            <param name="b5">Sixth byte.</param>
            <param name="b6">Seventh byte.</param>
            <param name="b7">Eighth byte.</param>
            <param name="b8">Ninth byte.</param>
            <param name="b9">Tenth byte.</param>
            <param name="b10">Eleventh byte.</param>
            <param name="b11">Twelfth byte.</param>
            <param name="b12">Thirteenth byte.</param>
            <param name="b13">Fourteenth byte.</param>
            <param name="b14">Fifteenth byte.</param>
            <param name="b15">Sixteenth byte.</param>
        </member>
        <member name="M:Wasmtime.V128.AsSpan">
            <summary>
            Creates a new writeable span over the bytes of this V128
            </summary>
            <returns>The span representation of this V128.</returns>
        </member>
        <member name="M:Wasmtime.V128.CopyTo(System.Span{System.Byte})">
            <summary>
            Copy bytes into a span
            </summary>
            <param name="dest">span to copy bytes into</param>
        </member>
        <member name="T:Wasmtime.ValueKind">
            <summary>
            Represents the possible kinds of WebAssembly values.
            </summary>
        </member>
        <member name="F:Wasmtime.ValueKind.Int32">
            <summary>
            The value is a 32-bit integer.
            </summary>
        </member>
        <member name="F:Wasmtime.ValueKind.Int64">
            <summary>
            The value is a 64-bit integer.
            </summary>
        </member>
        <member name="F:Wasmtime.ValueKind.Float32">
            <summary>
            The value is a 32-bit floating point number.
            </summary>
        </member>
        <member name="F:Wasmtime.ValueKind.Float64">
            <summary>
            The value is a 64-bit floating point number.
            </summary>
        </member>
        <member name="F:Wasmtime.ValueKind.V128">
            <summary>
            The value is a 128-bit value representing the WebAssembly `v128` type.
            </summary>
        </member>
        <member name="F:Wasmtime.ValueKind.FuncRef">
            <summary>
            The value is a function reference.
            </summary>
        </member>
        <member name="F:Wasmtime.ValueKind.ExternRef">
            <summary>
            The value is an external reference.
            </summary>
        </member>
        <member name="M:Wasmtime.Value.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Wasmtime.ValueBox">
            <summary>
            Allocation free container for a single value
            </summary>
        </member>
        <member name="M:Wasmtime.ValueBox.AsInt32">
            <summary>
            "Unbox" an <see cref="T:System.Int32"/> value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.ValueBox.AsInt64">
            <summary>
            "Unbox" a <see cref="T:System.Int64"/> value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.ValueBox.AsSingle">
            <summary>
            "Unbox" a <see cref="T:System.Single"/> value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.ValueBox.AsDouble">
            <summary>
            "Unbox" a <see cref="T:System.Double"/> value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.ValueBox.AsV128">
            <summary>
            "Unbox" a <see cref="T:Wasmtime.V128"/> value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.ValueBox.AsFunction(Wasmtime.Store)">
            <summary>
            "Unbox" a <see cref="T:Wasmtime.Function"/> value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.ValueBox.As``1">
            <summary>
            "Unbox" a reference type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Implicit(System.Int32)~Wasmtime.ValueBox">
            <summary>
            "Box" an int without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Implicit(System.Int64)~Wasmtime.ValueBox">
            <summary>
            "Box" a long without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Implicit(System.Single)~Wasmtime.ValueBox">
            <summary>
            "Box" a float without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Implicit(System.Double)~Wasmtime.ValueBox">
            <summary>
            "Box" a double without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Implicit(Wasmtime.V128)~Wasmtime.ValueBox">
            <summary>
            "Box" a 16 element vector of bytes without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Explicit(System.Byte[])~Wasmtime.ValueBox">
            <summary>
            "Box" a 16 element byte array without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Explicit(System.ReadOnlySpan{System.Byte})~Wasmtime.ValueBox">
            <summary>
            "Box" a 16 element byte span without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Implicit(Wasmtime.Function)~Wasmtime.ValueBox">
            <summary>
            "Box" a function without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.op_Implicit(System.String)~Wasmtime.ValueBox">
            <summary>
            "Box" a string without any heap allocations
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wasmtime.ValueBox.AsBox``1(``0)">
            <summary>
            "Box" an arbitrary reference type without any heap allocations
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Wasmtime.WasiConfiguration">
            <summary>
            Represents a WASI configuration.
            </summary>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithArg(System.String)">
            <summary>
            Adds a command line argument to the configuration.
            </summary>
            <param name="arg">The command line argument to add.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithArgs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds multiple command line arguments to the configuration.
            </summary>
            <param name="args">The command line arguments to add.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithArgs(System.String[])">
            <summary>
            Adds multiple command line arguments to the configuration.
            </summary>
            <param name="args">The command line arguments to add.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithArgs(System.ReadOnlySpan{System.String})">
            <summary>
            Adds multiple command line arguments to the configuration.
            </summary>
            <param name="args">The command line arguments to add.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithInheritedArgs">
            <summary>
            Sets the configuration to inherit command line arguments.
            </summary>
            <remarks>Any explicitly specified command line arguments will be removed.</remarks>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithEnvironmentVariable(System.String,System.String)">
            <summary>
            Adds an environment variable to the configuration.
            </summary>
            <param name="name">The name of the environment variable.</param>
            <param name="value">The value of the environment variable.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithEnvironmentVariables(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Adds multiple environment variables to the configuration.
            </summary>
            <param name="vars">The name-value tuples of the environment variables to add.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithInheritedEnvironment">
            <summary>
            Sets the configuration to inherit environment variables.
            </summary>
            <remarks>Any explicitly specified environment variables will be removed.</remarks>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithStandardInput(System.String)">
            <summary>
            Sets the configuration to use the given file path as stdin.
            </summary>
            <param name="path">The file to use as stdin.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithInheritedStandardInput">
            <summary>
            Sets the configuration to inherit stdin.
            </summary>
            <remarks>Any explicitly specified stdin file will be removed.</remarks>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithStandardOutput(System.String)">
            <summary>
            Sets the configuration to use the given file path as stdout.
            </summary>
            <param name="path">The file to use as stdout.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithInheritedStandardOutput">
            <summary>
            Sets the configuration to inherit stdout.
            </summary>
            <remarks>Any explicitly specified stdout file will be removed.</remarks>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithStandardError(System.String)">
            <summary>
            Sets the configuration to use the given file path as stderr.
            </summary>
            <param name="path">The file to use as stderr.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithInheritedStandardError">
            <summary>
            Sets the configuration to inherit stderr.
            </summary>
            <remarks>Any explicitly specified stderr file will be removed.</remarks>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="M:Wasmtime.WasiConfiguration.WithPreopenedDirectory(System.String,System.String)">
            <summary>
            Adds a preopen directory to the configuration.
            </summary>
            <param name="path">The path to the directory to add.</param>
            <param name="guestPath">The path the guest will use to open the directory.</param>
            <returns>Returns the current configuration.</returns>
        </member>
        <member name="T:Wasmtime.WasmtimeException">
            <summary>
            The base type for Wasmtime exceptions.
            </summary>
        </member>
        <member name="M:Wasmtime.WasmtimeException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Wasmtime.WasmtimeException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Wasmtime.WasmtimeException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="P:Wasmtime.WasmtimeException.Frames">
            <summary>
            Gets the error's frames.
            </summary>
        </member>
        <member name="P:Wasmtime.WasmtimeException.ExitCode">
             <summary>
             Gets the exit code when the error results from executing the WASI <c>proc_exit</c> function.
            
             The value is <c>null</c> if the error was not an exit error.
             </summary>
        </member>
        <member name="M:Wasmtime.WasmtimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
    </members>
</doc>
